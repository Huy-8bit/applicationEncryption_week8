#include<iostream>
#include<string>
#include<iomanip>
using namespace std;

void printHex(string str) {
    for (char c : str) {
        cout << hex << setw(2) << setfill('0') << static_cast<int>(c) << " ";
    }
    cout << endl;
}



int main() {
    system("cls");
    string m = "12345678", c = "", k = "1234567";
    // in ra chuoi m (so thap luc phan)
    printHex(m);
    // in ra chuoi c (so thap luc phan)

    // c = CBCRandomEncrypt(m, k);
    printHex(c);

    // in ra chuoi m (so thap luc phan)
    // m = CBCRandomDecrypt(c, k);
    // printHex(m);


    return 0;
}




-----------------------------------


#include<iostream>
#include<string>
#include<iomanip>
#include<cstring>
#include<algorithm>
using namespace std;

// AES round constant table
const unsigned char Rcon[11] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C
};


static const uint8_t sbox[256] = {
    // 0     1     2     3     4     5     6     7
    // 8     9     A     B     C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; // F

// SubBytes: substitution using the S-box
void subBytes(unsigned char* state) {
    for (int i = 0; i < 16; i++) {
        state[i] = sbox[state[i]];
    }
}

// ShiftRows: cyclically shift each row
void shiftRows(unsigned char* state) {
    unsigned char tmp[16];
    memcpy(tmp, state, 16);
    for (int r = 0; r < 4; r++) {
        for (int c = 0; c < 4; c++) {
            tmp[4 * r + c] = state[4 * r + (c + r) % 4];
        }
    }
    memcpy(state, tmp, 16);
}


// MixColumns: matrix multiplication over GF(2^8)
uint8_t gf_mul(uint8_t value) {
    if (value < 0x80) {
        return static_cast<uint8_t>((value << 1) & 0xFF);
    }
    else {
        return static_cast<uint8_t>((value << 1) ^ 0x1B);
    }
}

void mixColumns(unsigned char* state) {
    unsigned char tmp[16];
    for (int c = 0; c < 4; c++) {
        tmp[4 * c + 0] = gf_mul(state[4 * c + 0]) ^ gf_mul(state[4 * c + 1]) ^ state[4 * c + 2] ^ state[4 * c + 3];
        tmp[4 * c + 1] = state[4 * c + 0] ^ gf_mul(state[4 * c + 1]) ^ gf_mul(state[4 * c + 2]) ^ state[4 * c + 3];
        tmp[4 * c + 2] = state[4 * c + 0] ^ state[4 * c + 1] ^ gf_mul(state[4 * c + 2]) ^ gf_mul(state[4 * c + 3]);
        tmp[4 * c + 3] = gf_mul(state[4 * c + 0]) ^ state[4 * c + 1] ^ state[4 * c + 2] ^ gf_mul(state[4 * c + 3]);
    }
    memcpy(state, tmp, 16);
}

// AddRoundKey: XOR with the round key
void addRoundKey(unsigned char* state, unsigned char* key) {
    for (int i = 0; i < 16; i++) {
        state[i] ^= key[i];
    }
}

// KeyExpansion: generate the round keys
void keyExpansion(unsigned char* key, unsigned char* roundKey) {
    unsigned char tmp[4], t;
    const int Nk = 4, Nr = 10;
    const int Nb = 4;
    unsigned char Rcon[11] = { 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
    for (int i = 0; i < Nk; i++) {
        roundKey[4 * i + 0] = key[4 * i + 0];
        roundKey[4 * i + 1] = key[4 * i + 1];
        roundKey[4 * i + 2] = key[4 * i + 2];
        roundKey[4 * i + 3] = key[4 * i + 3];
    }

    for (int i = Nk; i < Nb * (Nr + 1); i++) {
        tmp[0] = roundKey[4 * (i - 1) + 0];
        tmp[1] = roundKey[4 * (i - 1) + 1];
        tmp[2] = roundKey[4 * (i - 1) + 2];
        tmp[3] = roundKey[4 * (i - 1) + 3];

        if (i % Nk == 0)
        {
            t = tmp[0];
            tmp[0] = sbox[tmp[1]] ^ Rcon[i / Nk];
            tmp[1] = sbox[tmp[2]];
            tmp[2] = sbox[tmp[3]];
            tmp[3] = sbox[t];
        }
        else if (Nk > 6 && i % Nk == 4) {
            tmp[0] = sbox[tmp[0]];
            tmp[1] = sbox[tmp[1]];
            tmp[2] = sbox[tmp[2]];
            tmp[3] = sbox[tmp[3]];
        }
        roundKey[4 * i + 0] = roundKey[4 * (i - Nk) + 0] ^ tmp[0];
        roundKey[4 * i + 1] = roundKey[4 * (i - Nk) + 1] ^ tmp[1];
        roundKey[4 * i + 2] = roundKey[4 * (i - Nk) + 2] ^ tmp[2];
        roundKey[4 * i + 3] = roundKey[4 * (i - Nk) + 3] ^ tmp[3];
    }
}

// AES encryption function
void aes_encrypt(unsigned char* message, unsigned char* key, unsigned char* ciphertext) {
    unsigned char state[16];
    unsigned char roundKey[176];
    memcpy(state, message, 16);
    keyExpansion(key, roundKey);
    addRoundKey(state, key);
    for (int i = 1; i <= 10; i++) {
        subBytes(state);
        shiftRows(state);
        if (i < 10) {
            mixColumns(state);
        }
        addRoundKey(state, roundKey + 16 * i);
    }
    memcpy(ciphertext, state, 16);
}

int main() {
    unsigned char message[] = "Two One Nine Two";
    unsigned char key[] = "Thats my Kung Fu";
    unsigned char ciphertext[16];
    unsigned char decrypted[16];
    aes_encrypt(message, key, ciphertext);
    // aes_decrypt(ciphertext, key, decrypted);

    printf("Original message: %s\n", message);
    printf("Encrypted message: ");
    for (int i = 0; i < 16; i++) {
        printf("%02x", ciphertext[i]);
        cout << " ";
    }
    printf("\n");

    // printf("Decrypted message: %s\n", decrypted);

    return 0;
}




------------------------

#include <iostream>
#include <cstring>
#include <cstdint>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>


using namespace std;


const uint8_t rcon[] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x00
};

static const uint8_t sbox[256] = {
    // 0     1     2     3     4     5     6     7
    // 8     9     A     B     C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 //F
    }; // F

// Define the AES block size
const int AES_BLOCK_SIZE = 16;

// Define the AES key size
const int AES_KEY_SIZE = 16;

// Define the number of rounds in AES-128
const int AES_ROUNDS = 10;

const uint8_t inv_sbox[] = {
};

// Define the key schedule function to generate round keys
void key_schedule(const uint8_t* key, uint8_t* round_keys)
{
    uint8_t temp[4];
    uint8_t i, j, k;
    // Copy the original key to the first 16 bytes of round_keys
    for (i = 0; i < 16; i++) {
        round_keys[i] = key[i];
    }

    // Generate the remaining round keys
    for (i = 1, j = 0; i < 11; i++) {
        // Copy the previous 4 bytes to temp
        for (k = 0; k < 4; k++) {
            temp[k] = round_keys[(i - 1) * 16 + 12 + k];
        }

        // Apply the key schedule core
        if (i % 4 == 0) {
            // Rotate the temp word by 1 byte
            uint8_t t = temp[0];
            for (k = 0; k < 3; k++) {
                temp[k] = temp[k + 1];
            }
            temp[3] = t;

            // Apply the S-box to each byte
            for (k = 0; k < 4; k++) {
                temp[k] = sbox[temp[k]];
            }

            // XOR the first byte with the round constant
            temp[0] ^= rcon[(i / 4) - 1];
        }

        // XOR temp with the 4-byte block at the end of the previous round key
        for (k = 0; k < 4; k++) {
            round_keys[i * 16 + k] = round_keys[(i - 1) * 16 + k] ^ temp[k];
        }

        // XOR the remaining 12 bytes with the corresponding bytes in the previous round key
        for (k = 4; k < 16; k++) {
            round_keys[i * 16 + k] = round_keys[(i - 1) * 16 + k] ^ round_keys[i * 16 + k - 4];
        }
    }
}
uint8_t gf_mul(uint8_t a, uint8_t b) {
    uint8_t p = 0;
    for (int i = 0; i < 8; i++) {
        if (b & 1) {
            p ^= a;
        }
        uint8_t high_bit = a & 0x80;
        a <<= 1;
        if (high_bit) {
            a ^= 0x1b;
        }
        b >>= 1;
    }
    return p;
}

// Define the encryption function
void aes_encrypt(const uint8_t* plaintext, const uint8_t* key, uint8_t* ciphertext)
{
    uint8_t state[4][4];
    uint8_t round_keys[176];
    uint8_t i, j, k, round;
    // Generate the round keys from the key
    key_schedule(key, round_keys);

    // Copy the plaintext into the state array
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            state[j][i] = plaintext[i * 4 + j];
        }
    }

    // Add the first round key to the state
    for (i = 0; i < 16; i++) {
        state[i % 4][i / 4] ^= round_keys[i];
    }

    // Perform the 9 main rounds
    for (round = 1; round <= 9; round++) {
        // Substitute each byte in the state with the corresponding byte in the S-box
        for (i = 0; i < 4; i++) {
            for (j = 0; j < 4; j++) {
                state[i][j] = sbox[state[i][j]];
            }
        }
        // Shift the rows of the state
        for (i = 1; i < 4; i++) {
            for (j = 0; j < i; j++) {
                uint8_t t = state[i][0];
                for (k = 0; k < 3; k++) {
                    state[i][k] = state[i][k + 1];
                }
                state[i][3] = t;
            }
        }

        // Mix the columns of the state using the Galois field multiplication
        for (i = 0; i < 4; i++) {
            uint8_t s0 = state[0][i];
            uint8_t s1 = state[1][i];
            uint8_t s2 = state[2][i];
            uint8_t s3 = state[3][i];

            state[0][i] = gf_mul(s0, 0x02) ^ gf_mul(s1, 0x03) ^ s2 ^ s3;
            state[1][i] = s0 ^ gf_mul(s1, 0x02) ^ gf_mul(s2, 0x03) ^ s3;
            state[2][i] = s0 ^ s1 ^ gf_mul(s2, 0x02) ^ gf_mul(s3, 0x03);
            state[3][i] = gf_mul(s0, 0x03) ^ s1 ^ s2 ^ gf_mul(s3, 0x02);
        }

        // Add the round key to the state
        for (i = 0; i < 16; i++) {
            state[i % 4][i / 4] ^= round_keys[round * 16 + i];
        }
    }

    // Perform the final round
    // Substitute each byte in the state with the corresponding byte in the S-box
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            state[i][j] = sbox[state[i][j]];
        }
    }

    // Shift the rows of the state
    for (i = 1; i < 4; i++) {
        for (j = 0; j < i; j++) {
            uint8_t t = state[i][0];
            for (k = 0; k < 3; k++) {
                state[i][k] = state[i][k + 1];
            }
            state[i][3] = t;
        }
    }

    // Add the final round key to the state
    for (i = 0; i < 16; i++) {
        state[i % 4][i / 4] ^= round_keys[160 + i];
    }

    // Copy the state into the ciphertext array
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            ciphertext[i * 4 + j] = state[j][i];
        }
    }
}


// int main()
// {
//     // Define the plaintext and key
//     uint8_t plaintext[16] = {
//         0x32, 0x88, 0x31, 0xe0,
//         0x43, 0x5a, 0x31, 0x37,
//         0xf6, 0x30, 0x98, 0x07,
//         0xa8, 0x8d, 0xa2, 0x34
//     };
//     uint8_t key[16] = {
//         0x2b, 0x7e, 0x15, 0x16,
//         0x28, 0xae, 0xd2, 0xa6,
//         0xab, 0xf7, 0x15, 0x88,
//         0x09, 0xcf, 0x4f, 0x3c
//     };

//     // Encrypt the plaintext using AES-128
//     uint8_t ciphertext[16];
//     aes_encrypt(plaintext, key, ciphertext);

//     // Print the ciphertext
//     cout << "Ciphertext: ";
//     for (int i = 0; i < 16; i++) {
//         cout << hex << setw(2) << setfill('0') << (int)ciphertext[i] << " ";
//     }
//     cout << endl;

//     return 0;
// }


int main()
{
    // Define the plaintext and key as strings
    // string plaintext_str = "This is a plaintext message.";
    // string key_str = "This is a secret key.";

    string key_str = "0123456789abcdef";
    string plaintext_str = "0123456789abcdef";
    
    // Convert the plaintext and key to uint8_t arrays
    const uint8_t* plaintext = reinterpret_cast<const uint8_t*>(plaintext_str.data());
    const uint8_t* key = reinterpret_cast<const uint8_t*>(key_str.data());
    
    // Print the plaintext and key as uint8_t arrays
    cout << "Plaintext: ";
    for (int i = 0; i < plaintext_str.size(); i++) {
        cout << hex << (int)plaintext[i] << " ";
    }
    cout << endl;
    
    cout << "Key: ";
    for (int i = 0; i < key_str.size(); i++) {
        cout << hex << (int)key[i] << " ";
    }
    cout << endl;
    
    // Encrypt the plaintext using AES-128
    uint8_t ciphertext[16];
    aes_encrypt(plaintext, key, ciphertext);
    
    // Print the ciphertext
    cout << "Ciphertext: ";
    for (int i = 0; i < 16; i++) {
        cout << hex << setw(2) << setfill('0') << (int)ciphertext[i] << " ";
    }
    cout << endl;
    
    return 0;
}



----------------------------------------------------------------

#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <cstdint>
#include <cstring>
using namespace std;


// S-box
const unsigned char sbox[256] = {
    // 0     1     2     3     4     5     6     7
    // 8     9     A     B     C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, //0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, //1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, //2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, //3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, //4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, //5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, //6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, //7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, //8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, //9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, //A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, //B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, //C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, //D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, //E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 //F

};


const unsigned char rcon[11] = {
  0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x00
};



void keyExpansion(unsigned char* key, unsigned char* expandedKey) {
    int bytesGenerated = 16; // bytes generated so far
    int rconIteration = 1; // current rcon iteration value
    unsigned char temp[4]; // temporary 4-byte buffer for core key schedule operations

    // copy key to start of expanded key
    for (int i = 0; i < 16; i++) {
        expandedKey[i] = key[i];
    }

    // generate rest of expanded key
    while (bytesGenerated < 176) {
        // copy last 4 bytes of expanded key to temporary buffer
        for (int i = 0; i < 4; i++) {
            temp[i] = expandedKey[i + bytesGenerated - 4];
        }

        // perform core key schedule operations on temporary buffer
        if (bytesGenerated % 16 == 0) {
            // rotate left by 1 byte
            unsigned char tempByte = temp[0];
            temp[0] = temp[1];
            temp[1] = temp[2];
            temp[2] = temp[3];
            temp[3] = tempByte;

            // apply S-box to each byte
            for (int i = 0; i < 4; i++) {
                temp[i] = sbox[temp[i]];
            }

            // XOR first byte with rcon iteration value
            temp[0] ^= rcon[rconIteration];
            rconIteration++;
        }
        else if (bytesGenerated % 16 == 4) {
            // apply S-box to each byte
            for (int i = 0; i < 4; i++) {
                temp[i] = sbox[temp[i]];
            }
        }

        // XOR with 16-byte block n bytes before
        for (int i = 0; i < 4; i++) {
            expandedKey[bytesGenerated] = expandedKey[bytesGenerated - 16] ^ temp[i];
            bytesGenerated++;
        }
    }
}

void subBytes(unsigned char* state) {
    int i, j;
    unsigned char row, col;

    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            row = (state[i * 4 + j] >> 4) & 0x0f;
            col = state[i * 4 + j] & 0x0f;
            state[i * 4 + j] = sbox[row * 16 + col];
        }
    }
}

void shiftRows(unsigned char* state) {
    unsigned char temp;

    // Shift second row
    temp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = temp;

    // Shift third row
    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;

    // Shift fourth row
    temp = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = state[3];
    state[3] = temp;
}

unsigned char gfMul(unsigned char a, unsigned char b) {
    unsigned char p = 0;
    unsigned char hi_bit_set;
    for (int i = 0; i < 8; i++) {
        if (b & 1) {
            p ^= a;
        }
        hi_bit_set = (a & 0x80);
        a <<= 1;
        if (hi_bit_set) {
            a ^= 0x1B; /* x^8 + x^4 + x^3 + x + 1 */
        }
        b >>= 1;
    }
    return p;
}



void mixColumns(unsigned char* state) {
    unsigned char temp[4];
    for (int i = 0; i < 4; ++i) {
        temp[0] = gfMul(state[i], 0x02) ^ gfMul(state[4 + i], 0x03) ^ state[8 + i] ^ state[12 + i];
        temp[1] = state[i] ^ gfMul(state[4 + i], 0x02) ^ gfMul(state[8 + i], 0x03) ^ state[12 + i];
        temp[2] = state[i] ^ state[4 + i] ^ gfMul(state[8 + i], 0x02) ^ gfMul(state[12 + i], 0x03);
        temp[3] = gfMul(state[i], 0x03) ^ state[4 + i] ^ state[8 + i] ^ gfMul(state[12 + i], 0x02);

        state[i] = temp[0];
        state[4 + i] = temp[1];
        state[8 + i] = temp[2];
        state[12 + i] = temp[3];
    }
}


void addRoundKey(unsigned char* state, unsigned char* roundKey) {
    for (int i = 0; i < 16; i++) {
        state[i] ^= roundKey[i];
    }
}

void aesEncrypt(unsigned char* data, unsigned char* key, unsigned char* encryptedData)
{
    unsigned char state[16];
    unsigned char expandedKey[176];
    int round;

    // Copy the data into the state matrix
    for (int i = 0; i < 16; i++) {
        state[i] = data[i];
    }

    // Generate the round keys
    keyExpansion(key, expandedKey);

    // Add the initial round key
    addRoundKey(state, expandedKey);

    // Perform the 9 main rounds
    for (round = 1; round <= 9; round++) {
        subBytes(state);
        shiftRows(state);
        mixColumns(state);
        addRoundKey(state, expandedKey + (round * 16));
    }

    // Perform the final round
    subBytes(state);
    shiftRows(state);
    addRoundKey(state, expandedKey + 160);

    // Copy the final state to the output buffer
    for (int i = 0; i < 16; i++) {
        encryptedData[i] = state[i];
    }
}


int main() {

    string key = "0123456789abcdef";
    string plaintext = "0123456789abcdef";
    unsigned char encryptedData[16];

    aesEncrypt((unsigned char*)plaintext.c_str(), (unsigned char*)key.c_str(), encryptedData);

    for (int i = 0; i < 16; i++) {
        cout << hex << (int)encryptedData[i] << " ";
    }


    return 0;
}

----------------------
#include<iostream>
#include<string>
#include<vector>
#include<cstring>
#include<iomanip>
using namespace std;

const int Nb = 4;  // number of columns in the state
const int Nk = 4;  // number of words in the key
const int Nr = 10; // number of rounds in AES-128

// S-box
const unsigned char sbox[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};
unsigned char inv_sbox[256] =
{
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

const unsigned char rcon[11] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
};


void key_expansion(unsigned char* input_key, unsigned char* expanded_keys) {

    unsigned char temp[4], k;

    for (int i = 0; i < Nk; i++) {
        expanded_keys[i * 4] = input_key[i * 4];
        expanded_keys[i * 4 + 1] = input_key[i * 4 + 1];
        expanded_keys[i * 4 + 2] = input_key[i * 4 + 2];
        expanded_keys[i * 4 + 3] = input_key[i * 4 + 3];
    }

    for (int i = Nk; i < Nb * (Nr + 1); i++) {
        k = i - 1;
        temp[0] = expanded_keys[k * 4 + 0];
        temp[1] = expanded_keys[k * 4 + 1];
        temp[2] = expanded_keys[k * 4 + 2];
        temp[3] = expanded_keys[k * 4 + 3];

        if (i % Nk == 0) {
            temp[0] = sbox[temp[1]] ^ rcon[i / Nk];
            temp[1] = sbox[temp[2]];
            temp[2] = sbox[temp[3]];
            temp[3] = sbox[temp[0]];
        }
        else if (Nk > 6 && i % Nk == 4) {
            temp[0] = sbox[temp[0]];
            temp[1] = sbox[temp[1]];
            temp[2] = sbox[temp[2]];
            temp[3] = sbox[temp[3]];
        }

        expanded_keys[i * 4 + 0] = expanded_keys[(i - Nk) * 4 + 0] ^ temp[0];
        expanded_keys[i * 4 + 1] = expanded_keys[(i - Nk) * 4 + 1] ^ temp[1];
        expanded_keys[i * 4 + 2] = expanded_keys[(i - Nk) * 4 + 2] ^ temp[2];
        expanded_keys[i * 4 + 3] = expanded_keys[(i - Nk) * 4 + 3] ^ temp[3];
    }
}

void add_round_key(unsigned char* state, unsigned char* round_key) {

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[i * 4 + j] ^= round_key[i * 4 + j];
        }
    }
}

void sub_bytes(unsigned char* state) {

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[i * 4 + j] = sbox[state[i * 4 + j]];
        }
    }
}

void shift_rows(unsigned char* state) {

    unsigned char temp[4];

    temp[0] = state[1];
    temp[1] = state[5];
    temp[2] = state[9];
    temp[3] = state[13];

    state[1] = temp[0];
    state[5] = temp[1];
    state[9] = temp[2];
    state[13] = temp[3];

    temp[0] = state[2];
    temp[1] = state[6];
    temp[2] = state[10];
    temp[3] = state[14];

    state[2] = temp[0];
    state[6] = temp[1];
    state[10] = temp[2];
    state[14] = temp[3];

    temp[0] = state[3];
    temp[1] = state[7];
    temp[2] = state[11];
    temp[3] = state[15];

    state[3] = temp[0];
    state[7] = temp[1];
    state[11] = temp[2];
    state[15] = temp[3];

    temp[0] = state[15];
    temp[1] = state[11];
    temp[2] = state[7];
    temp[3] = state[3];

    state[15] = temp[0];
    state[11] = temp[1];
    state[7] = temp[2];
    state[3] = temp[3];
}


unsigned char mul2[] =
{
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

unsigned char mul3[] =
{
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};



void mix_columns(unsigned char* state) {

    unsigned char temp[4];

    for (int i = 0; i < 4; i++) {
        temp[0] = state[i * 4 + 0];
        temp[1] = state[i * 4 + 1];
        temp[2] = state[i * 4 + 2];
        temp[3] = state[i * 4 + 3];

        state[i * 4 + 0] = (unsigned char)(mul2[temp[0]] ^ mul3[temp[1]] ^ temp[2] ^ temp[3]);
        state[i * 4 + 1] = (unsigned char)(temp[0] ^ mul2[temp[1]] ^ mul3[temp[2]] ^ temp[3]);
        state[i * 4 + 2] = (unsigned char)(temp[0] ^ temp[1] ^ mul2[temp[2]] ^ mul3[temp[3]]);
        state[i * 4 + 3] = (unsigned char)(mul3[temp[0]] ^ temp[1] ^ temp[2] ^ mul2[temp[3]]);
    }
}



void cipher(unsigned char* input, unsigned char* output, unsigned char* expanded_keys) {

    unsigned char state[4 * 4];

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[j * 4 + i] = input[i * 4 + j];
        }
    }

    add_round_key(state, expanded_keys);

    for (int i = 1; i < Nr; i++) {
        sub_bytes(state);
        shift_rows(state);
        mix_columns(state);
        add_round_key(state, expanded_keys + i * 16);
    }

    sub_bytes(state);
    shift_rows(state);
    add_round_key(state, expanded_keys + Nr * 16);

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            output[i * 4 + j] = state[j * 4 + i];
        }
    }
}

void aes_encrypt(unsigned char* input, unsigned char* output, unsigned char* key) {

    unsigned char expanded_keys[176];

    key_expansion(key, expanded_keys);

    cipher(input, output, expanded_keys);

}

void print_hex(unsigned char* data, int len) {
    for (int i = 0; i < len; i++) {
        cout << hex << (int)data[i] << " ";
    }
}

void inv_shift_rows(unsigned char* state) {
    unsigned char temp;

    temp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = temp;

    temp = state[2];
    state[2] = state[10];
    state[10] = temp;
    temp = state[6];
    state[6] = state[14];
    state[14] = temp;

    temp = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = temp;
}

void inv_sub_bytes(unsigned char* state) {
    for (int i = 0; i < 16; i++) {
        state[i] = inv_sbox[state[i]];
    }
}



unsigned char mul9[] =
{
    0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
    0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
    0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
    0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
    0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
    0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
    0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
    0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
    0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
    0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
    0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
    0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
    0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
    0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
    0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
    0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};

unsigned char mul11[] =
{
    0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
    0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
    0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
    0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
    0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
    0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
    0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
    0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
    0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
    0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
    0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
    0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
    0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
    0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
    0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
    0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

unsigned char mul13[] =
{
    0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
    0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
    0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
    0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
    0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
    0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
    0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
    0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
    0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
    0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
    0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
    0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
    0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
    0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
    0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
    0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};

unsigned char mul14[] =
{
    0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
    0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
    0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
    0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
    0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
    0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
    0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
    0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
    0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
    0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
    0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
    0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
    0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
    0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
    0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
    0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

void inv_mix_columns(unsigned char* state) {
    unsigned char temp[4];

    for (int i = 0; i < 4; i++) {
        temp[0] = state[i * 4 + 0];
        temp[1] = state[i * 4 + 1];
        temp[2] = state[i * 4 + 2];
        temp[3] = state[i * 4 + 3];

        state[i * 4 + 0] = (unsigned char)(mul14[temp[0]] ^ mul11[temp[1]] ^ mul13[temp[2]] ^ mul9[temp[3]]);
        state[i * 4 + 1] = (unsigned char)(mul9[temp[0]] ^ mul14[temp[1]] ^ mul11[temp[2]] ^ mul13[temp[3]]);
        state[i * 4 + 2] = (unsigned char)(mul13[temp[0]] ^ mul9[temp[1]] ^ mul14[temp[2]] ^ mul11[temp[3]]);
        state[i * 4 + 3] = (unsigned char)(mul11[temp[0]] ^ mul13[temp[1]] ^ mul9[temp[2]] ^ mul14[temp[3]]);
    }
}

void aes_decrypt(unsigned char* input, unsigned char* output, unsigned char* expanded_keys) {

    unsigned char state[4 * 4];

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[j * 4 + i] = input[i * 4 + j];
        }
    }

    add_round_key(state, expanded_keys + Nr * 16);

    for (int i = Nr - 1; i > 0; i--) {
        inv_shift_rows(state);
        inv_sub_bytes(state);
        add_round_key(state, expanded_keys + i * 16);
        inv_mix_columns(state);
    }

    inv_shift_rows(state);
    inv_sub_bytes(state);
    add_round_key(state, expanded_keys);

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            output[i * 4 + j] = state[j * 4 + i];
        }
    }
}

int main() {
    // input is 0123456789abcdef
    // key is 0123456789abcdef


    unsigned char input[] = "0123456789abcdef";
    unsigned char output[16];
    unsigned char key[] = "0123456789abcdef";
    cout << "input: ";
    print_hex(input, 16);
    cout << endl << endl;

    aes_encrypt(input, output, key);
    print_hex(output, 16);
    cout << endl << endl;
    aes_decrypt(output, input, key);
    print_hex(input, 16);

    return 0;
}


